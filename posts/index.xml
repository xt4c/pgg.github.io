<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>All Posts - My New Hugo Site</title>
        <link>http://example.org/posts/</link>
        <description>All Posts | My New Hugo Site</description>
        <generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 19 Oct 2022 10:55:28 &#43;0800</lastBuildDate><atom:link href="http://example.org/posts/" rel="self" type="application/rss+xml" /><item>
    <title>A</title>
    <link>http://example.org/posts/a/</link>
    <pubDate>Wed, 19 Oct 2022 10:55:28 &#43;0800</pubDate>
    <author>Author</author>
    <guid>http://example.org/posts/a/</guid>
    <description><![CDATA[]]></description>
</item>
<item>
    <title></title>
    <link>http://example.org/posts/elasticsearch%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://example.org/posts/elasticsearch%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</guid>
    <description><![CDATA[]]></description>
</item>
<item>
    <title></title>
    <link>http://example.org/posts/mysql/</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://example.org/posts/mysql/</guid>
    <description><![CDATA[基础篇 通用语法及分类 DDL: 数据定义语言，用来定义数据库对象（数据库、表、字段） DML: 数据操作语言，用来对数据库表中的数据进行增删改 DQL: 数据查询语言，用来查询数据库中表的记录 DCL: 数据控制语言，用来创建数据库用户、控制数据库的控制权限 DDL（数据定义语言） 数据定义语言
数据库操作 查询所有数据库： SHOW DATABASES; 查询当前数据库： SELECT DATABASE(); 创建数据库： CREATE DATABASE [ IF NOT EXISTS ] 数据库名 [ DEFAULT CHARSET 字符集] [COLLATE 排序规则 ]; 删除数据库： DROP DATABASE [ IF EXISTS ] 数据库名; 使用数据库： USE 数据库名;
注意事项 UTF8字符集长度为3字节，有些符号占4字节，所以推荐用utf8mb4字符集 表操作 查询当前数据库所有表： SHOW TABLES; 查询表结构： DESC 表名; 查询指定表的建表语句： SHOW CREATE TABLE 表名;
创建表：
CREATE TABLE 表名( 字段1 字段1类型 [COMMENT 字段1注释], 字段2 字段2类型 [COMMENT 字段2注释], 字段3 字段3类型 [COMMENT 字段3注释], .]]></description>
</item>
<item>
    <title></title>
    <link>http://example.org/posts/stream/</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://example.org/posts/stream/</guid>
    <description><![CDATA[]]></description>
</item>
<item>
    <title></title>
    <link>http://example.org/posts/thinking-in-java/</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://example.org/posts/thinking-in-java/</guid>
    <description><![CDATA[引用（Reference）
String s;
String s = &ldquo;addr&rdquo;;关联
scope 作用域 free-form 自由格式语言
static
类{字段，方法}
javadoc文档注释
操作符 直接常量 100L,2.9D, 十六进制 前缀0X 八进制 前缀0
指数计数法 e 代表10
移位操作符：二进制&laquo; , &raquo; , 可与 = 结合 &raquo;= &laquo;= &raquo;&gt;=
printBinaryInt printBinaryLong 接受int 和 long 以二进制格式输出
三元操作符 boolean-exp ? value0 : value1
float double 转型 int 会截尾
舍入 java.lang.math round()方法
留意narrowing conversion窄化转换
控制流程 foreach可用 range() method &ndash;&gt;数组
for(int i : range(10)){ println( i + &ldquo;&rdquo;); }]]></description>
</item>
<item>
    <title></title>
    <link>http://example.org/posts/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E5%88%9B%E5%BB%BA%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
    <pubDate>Mon, 01 Jan 0001 00:00:00 &#43;0000</pubDate>
    <author>Author</author>
    <guid>http://example.org/posts/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E5%88%9B%E5%BB%BA%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</guid>
    <description><![CDATA[单例模式(创建型设计模式) 一.饿汉式 public class Singleton { //1.在本类中维护一个私有构造方法 private Singleton() { } //2.封装一个静态私有本类成员变量并初始化. private static Singleton singleton = new Singleton(); //2.提供一个全局可以访问的静态方法用于获取到本类对象 public static Singleton getInstance() { return singleton; //返回本类成员变量 } } 类加载初始化阶段已经创建完成，所以无多线程问题
反射破坏：加入构造方法抛出异常
序列化：序列化核心方法是readResovle，可以创建此方法，并将全局对象返回
Unsafe类：sun.misc.Unsafe反射获得对象，调用allocateInstance方法（直接操作内存，人为可控）
枚举 public enum Singleton { SINGLETON; //声明一个本类的对象名称 //不需要声明任何成员变量 //声明成员方法 public void show() { System.out.println(&#34;Singleton类的show方法执行了!&#34;); } //重写toString是因为默认父类Enum的toString会打印该对象名称无法看到十六进制哈希值,重写后逻辑为打印十六进制哈希值. @Override public String toString() { return &#34;类名称&#34; + this.getClass().getName() + &#34; 地址值:&#34; + Integer.toHexString(hashCode()); } } public class SingletonTest { public static void main(String[] args) { //通过枚举类型.]]></description>
</item>
</channel>
</rss>
